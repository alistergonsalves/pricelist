<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tyre Price List App</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.21.4/babel.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>
<body class="bg-gray-100">
  <div id="root" class="container mx-auto p-4"></div>

  <script type="text/babel">
    const { useState } = React;

    const TyrePriceListApp = () => {
      const [tyres, setTyres] = useState([]);
      const [formData, setFormData] = useState({
        size: '',
        mrp: '',
        sellingPrice: '',
        stock: ''
      });
      const [isModalOpen, setIsModalOpen] = useState(false);

      const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
      };

      const handleAddTyre = () => {
        if (formData.size && formData.mrp && formData.sellingPrice && formData.stock) {
          setTyres([...tyres, { ...formData, id: Date.now() }]);
          setFormData({ size: '', mrp: '', sellingPrice: '', stock: '' });
          setIsModalOpen(false);
        } else {
          alert('Please fill all fields');
        }
      };

      const handleDeleteTyre = (id) => {
        setTyres(tyres.filter(tyre => tyre.id !== id));
      };

      const handleExcelImport = (e) => {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onload = (event) => {
          const data = new Uint8Array(event.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const sheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(sheet);
          const formattedData = jsonData.map(item => ({
            id: Date.now() + Math.random(),
            size: item['Tyre Size']?.toString() || '',
            mrp: item['MRP']?.toString() || '',
            sellingPrice: item['Selling Price']?.toString() || '',
            stock: item['Stock']?.toString() || ''
          }));
          setTyres([...tyres, ...formattedData]);
        };
        reader.readAsArrayBuffer(file);
      };

      return (
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold text-center mb-6">Passenger Vehicle Tyre Price List</h1>

          <div className="flex justify-between mb-4">
            <button
              onClick={() => setIsModalOpen(true)}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              Add Tyre
            </button>
            <label className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 cursor-pointer">
              Import from Excel
              <input
                type="file"
                accept=".xlsx, .xls"
                className="hidden"
                onChange={handleExcelImport}
              />
            </label>
          </div>

          {isModalOpen && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <div className="bg-white p-6 rounded-lg shadow-lg">
                <h2 className="text-xl font-semibold mb-4">Add New Tyre</h2>
                <input
                  type="text"
                  name="size"
                  value={formData.size}
                  onChange={handleInputChange}
                  placeholder="Tyre Size (e.g., 205/55R16)"
                  className="w-full mb-2 p-2 border rounded"
                />
                <input
                  type="number"
                  name="mrp"
                  value={formData.mrp}
                  onChange={handleInputChange}
                  placeholder="MRP"
                  className="w-full mb-2 p-2 border rounded"
                />
                <input
                  type="number"
                  name="sellingPrice"
                  value={formData.sellingPrice}
                  onChange={handleInputChange}
                  placeholder="Selling Price"
                  className="w-full mb-2 p-2 border rounded"
                />
                <input
                  type="number"
                  name="stock"
                  value={formData.stock}
                  onChange={handleInputChange}
                  placeholder="Stock Available"
                  className="w-full mb-2 p-2 border rounded"
                />
                <div className="flex justify-end gap-2">
                  <button
                    onClick={() => setIsModalOpen(false)}
                    className="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleAddTyre}
                    className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                  >
                    Add
                  </button>
                </div>
              </div>
            </div>
          )}

          <table className="w-full border-collapse bg-white shadow-md rounded-lg">
            <thead>
              <tr className="bg-gray-200">
                <th className="p-3 text-left">Tyre Size</th>
                <th className="p-3 text-left">MRP</th>
                <th className="p-3 text-left">Selling Price</th>
                <th className="p-3 text-left">Stock</th>
                <th className="p-3 text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {tyres.map(tyre => (
                <tr key={tyre.id} className="border-b">
                  <td className="p-3">{tyre.size}</td>
                  <td className="p-3">{tyre.mrp}</td>
                  <td className="p-3">{tyre.sellingPrice}</td>
                  <td className="p-3">{tyre.stock}</td>
                  <td className="p-3">
                    <button
                      onClick={() => handleDeleteTyre(tyre.id)}
                      className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      );
    };

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<TyrePriceListApp />);
  </script>
</body>
</html>
